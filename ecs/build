#!/bin/bash
# shellcheck disable=SC2046

set -e

export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

source $RY_ROOT/utils/util
source $RY_ROOT/ecs/functions

while [ $# -gt 0 ]; do
  case "$1" in
  --deploy | -d)
    should_deploy="true"
    ;;
  --config=* | -c=*)
    config_file_arg="${1#*=}"
    ;;
  --images=* | -i=*)
    images="${1#*=}"
    ;;
  -ci)
    using_CI="true"
    ;;
  -h)
    info "Available options:
-c    --config   Config file's name in .rayyone dir (staging.conf, prod.conf,...)
-d    --deploy   deploy to AWS ECS after building successfully (boolean)
-i    --images   Built docker services, separate by a colon (i=app,nginx,redis). Skip this option to build all images in docker-compose.yml
-h               help"
    exit 0
    ;;
  *)
    fatal "Error: Unknown argument: $1"
    ;;
  esac
  shift
done

[ ! -d ./$RY_ECS_DIR_PATH ] && fatal 'Config dir not found. Please run "ry ecs init" at your root project first'

config_file=$config_file_arg
if [[ -z $config_file ]]; then
  config_files=($(ls ./$RY_ECS_DIR_PATH/ 2>&1 | grep conf | sort -r))
  config_file=$(select_prompt "Select stage: " "${config_files[@]}")
fi

set -a
source ./$RY_ECS_DIR_PATH/$config_file
set +a

if [[ $using_CI == "true" ]]; then
  unset AWS_PROFILE
else
  env_confirm
  input_aws_cred
fi

log "IMAGE_URI: $IMAGE_URI"

info "Start building & upload images to AWS ECR"

log_step "Logging in Amazon ECR..."
aws ecr get-login-password --profile "$AWS_PROFILE" --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REPO"

log_step "Building docker images"
images_str=""
if [[ -n $images ]]; then
  images_str=$(echo "$images" | sed -r 's/,/ /g')
fi
docker_compose_file="ecs-docker-compose.yml"
if [ ! -f "$docker_compose_file" ]; then
  docker_compose_file="docker-compose.yml"
fi
build_script="docker-compose -f $docker_compose_file build $images_str --build-arg BUILDKIT_INLINE_CACHE=1"
echo "$build_script" && eval "$build_script"

log_step "Uploading to AWS ECR repo: $IMAGE_URI"
#info "Check repo: $ECR_APP_REPO_NAME"
#IMAGE_META="$( aws ecr describe-images --repository-name=admin-api-prod --output json )"
#info $IMAGE_META
#if [[ $? == 0 ]]; then
#  echo "$ECR_APP_REPO_NAME found"
#else
#  info "Create repo: $ECR_APP_REPO_NAME"
#    echo "$ECR_APP_REPO_NAME not found"
#    exit 1
#fi
#info $IMAGE_META
#exit 2
docker-compose -f $docker_compose_file push
log "Upload to AWS ECR successfully!"

log_step 'Delete untagged images... Press "Ctr + q" to proceed to next step'
IMAGES_TO_DELETE=$(aws ecr list-images --profile $AWS_PROFILE --region "$AWS_REGION" --repository-name "$ECR_APP_REPO_NAME" --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)
aws ecr batch-delete-image --profile $AWS_PROFILE --repository-name "$ECR_APP_REPO_NAME" --image-ids "$IMAGES_TO_DELETE" || true >>/dev/null

if [[ $should_deploy == "true" ]]; then
  info "Deploying to ECS..."
  new_deployment_ecs_service
  log "Success!"
  exit 0
fi

log "Success!"
